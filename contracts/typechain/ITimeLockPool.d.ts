/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITimeLockPoolInterface extends ethers.utils.Interface {
  functions: {
    "TVL()": FunctionFragment;
    "depositToken()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "finalTVL()": FunctionFragment;
    "getTotalDeposit(address)": FunctionFragment;
    "getTotalDeposits(address)": FunctionFragment;
    "getTotalReward(address)": FunctionFragment;
    "getTotalRewards(address)": FunctionFragment;
    "name()": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "recoverERC20(address,uint256,address)": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setRewardsDuration(uint256)": FunctionFragment;
    "totalClaimed()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TVL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "finalTVL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "TVL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalTVL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITimeLockPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITimeLockPoolInterface;

  functions: {
    TVL(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    earned(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    finalTVL(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDeposit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDeposits(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
          poolName: string;
          depositId: BigNumber;
          amount: BigNumber;
          start: BigNumber;
          ends: BigNumber;
          available: boolean;
        })[]
      ]
    >;

    getTotalReward(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, boolean] & {
          poolName: string;
          lockId: BigNumber;
          amount: BigNumber;
          ends: BigNumber;
          available: boolean;
        })[]
      ]
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setRewardsDuration(
      _stakingPoolDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  TVL(overrides?: CallOverrides): Promise<BigNumber>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  finalTVL(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDeposit(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDeposits(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      poolName: string;
      depositId: BigNumber;
      amount: BigNumber;
      start: BigNumber;
      ends: BigNumber;
      available: boolean;
    })[]
  >;

  getTotalReward(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalRewards(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, boolean] & {
      poolName: string;
      lockId: BigNumber;
      amount: BigNumber;
      ends: BigNumber;
      available: boolean;
    })[]
  >;

  name(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setRewardsDuration(
    _stakingPoolDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    TVL(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalTVL(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDeposit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDeposits(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        poolName: string;
        depositId: BigNumber;
        amount: BigNumber;
        start: BigNumber;
        ends: BigNumber;
        available: boolean;
      })[]
    >;

    getTotalReward(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, boolean] & {
        poolName: string;
        lockId: BigNumber;
        amount: BigNumber;
        ends: BigNumber;
        available: boolean;
      })[]
    >;

    name(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setRewardsDuration(
      _stakingPoolDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    TVL(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalTVL(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDeposit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDeposits(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalReward(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardsDuration(
      _stakingPoolDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TVL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalTVL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDeposit(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDeposits(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalReward(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardsDuration(
      _stakingPoolDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
